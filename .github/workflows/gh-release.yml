
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: GH Release
env:
  ARTIFACT_NAME: PowerShell.Workflows.Release.ScriptSigning


jobs:
  sign_scripts:
    name: Sign, validate, test and publish PowerShell scripts as pipeline artifacts
    runs-on: windows-latest
    environment: test
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Publish artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.workspace }}

  build:
    name: Create Release
    needs: sign_scripts
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      - name: Download zipped modules and replace old ones
        uses: actions/download-artifact@v3
        with:
          name:  ${{ env.ARTIFACT_NAME }}
          path: .              
      - run: ls -la        
      - run: echo "Testing Release" > README.md
      - id: archive-code      
        name: Archive code
        run: |
          repoName=$(echo "`basename ${{ github.repository }}`")
          echo "repo name is $repoName"
          mkdir -p release_assets
          releaseName=$(basename ${{ github.ref }})
          echo "Release is $releaseName" 
          # Create a tarball (tgz) and a zip file of your code
          tar --exclude='release_assets' --exclude='.git' --exclude='.github' -czvf release_assets/azure-cac-solution-$releaseName.tar.gz .
          zip -r release_assets/azure-cac-solution-$releaseName.zip . -x "release_assets/*" -x ".git/*" -x ".github/*"
          echo "value=`basename ${{ github.repository }}`" >> $GITHUB_OUTPUT
          echo "releasename=$releaseName" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_type }}" == "tag" ]; then
            echo "releaseName is $RELEASE_NAME"
            echo "RELEASE_REPO_NAME is $RELEASE_REPO_NAME"
            gh release create ${{ github.ref }} --generate-notes --latest "./release_assets/azure-cac-solution-$RELEASE_NAME.tar.gz#Azure CAC Solution (tar.gz)" "./release_assets/azure-cac-solution-$RELEASE_NAME.zip#Azure CAC Solution (zip)" 
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_REPO_NAME: ${{ steps.archive-code.outputs.value }}
          RELEASE_NAME: ${{ steps.archive-code.outputs.releasename }}

